import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'http://devrepo.kakao.com:8088/nexus/content/groups/public/' }
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    // fabric repository.
    maven { url 'https://maven.fabric.io/public' }
    // 캐시슬라이드 repository.
    maven { url 'http://nbt.bintray.com/public/' }
    flatDir {
        dirs 'aars'
    }
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId 'com.skb.btvmobile'
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 133
        versionName "3.6.0"
        dexOptions {
            javaMaxHeapSize "4g"
        }
        // Enabling multidex support.
        multiDexEnabled true
    }

//    lintOptions {
//        disable "ResourceType"
//    }

    // [START][mabae] ADD - signing apk
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            // application name
            def newName = defaultConfig.applicationId
            // version name
            newName += "_${defaultConfig.versionName}"
            // build type
            newName += "_${variant.buildType.name}.apk"
            output.outputFile = new File(file.parent, newName);
        }
    }

    // signing config
    signingConfigs {
        release {
            storeFile file("./btvmobile.keystore")
            storePassword "ahqkdlftv"
            keyAlias "btv mobile"
            keyPassword "btvmobile"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            debuggable true
            minifyEnabled true //proguard 적용 시 true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.release
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        unsigned {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res',
                    'src/main/res/layout/activity',
                    'src/main/res/layout/fragment'
            ]

            jniLibs.srcDirs = ['libs']
        }
    }
    productFlavors {
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], exclude: 'okio_fixed.jar', dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.0.0'
    compile 'com.android.support:support-annotations:25.0.0'
    compile 'com.android.support:support-compat:25.0.0'
    compile 'com.android.support:support-core-utils:25.0.0'
    compile 'com.android.support:support-core-ui:25.0.0'
    compile 'com.android.support:support-media-compat:25.0.0'
    compile 'com.android.support:support-fragment:25.0.0'
    compile 'com.android.support:recyclerview-v7:25.0.0'
    compile 'com.android.support:design:25.0.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.google.android.gms:play-services-ads:10.0.1'
    compile 'com.google.android.gms:play-services-gcm:10.0.1'
    compile 'com.google.android.gms:play-services-analytics:10.0.1'
    compile 'com.skb.btvmobile.vrlib:vrlib:1.1.0@aar'
    compile('com.crashlytics.sdk.android:crashlytics:2.6.7@aar') {
        transitive = true;
    }
    compile('com.crashlytics.sdk.android:answers:1.3.8@aar') {
        transitive = true;
    }
    // http://mongodb.github.io/mongo-java-driver/?_ga=1.94449812.969220302.1450318308
    compile 'org.mongodb:bson:2.14.1'
    compile project(':sugar')
    // for retrofit
    compile 'com.squareup.retrofit2:retrofit:2.0.2'
    compile 'com.squareup.retrofit2:converter-moshi:2.0.2'
    compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'
    // xmpp chatting
    compile 'org.igniterealtime.smack:smack-tcp:4.1.8'
    compile 'org.igniterealtime.smack:smack-android-extensions:4.1.8'
    compile 'org.igniterealtime.smack:smack-experimental:4.1.8'

    compile 'com.android.support:multidex:1.0.0'
    compile files('libs/morpheus_push_client_library_v3.8.0.15.jar')
    // reCaptcha
    compile 'android.lib.recaptcha:reCAPTCHA:1.0.2'
    //compile group: 'cn.apiclub.tool', name: 'simplecaptcha', version: '1.2.2'
    // 캐시슬라이드 SDK
    compile(group: 'com.cashslide', name: 'sdk', version: '20160623', ext: 'aar')
    // facebook SDK
    compile 'com.facebook.android:facebook-android-sdk:4.+'

    // 카카오 링크 sdk를 사용하기 위해 필요.
    compile group: 'com.kakao.sdk', name: 'kakaolink', version: '1.1.30'
    // 카카오톡 sdk를 사용하기 위해 필요.
    compile group: 'com.kakao.sdk', name: 'kakaotalk', version: '1.1.30'
    // 카카오 로그인 sdk를 사용하기 위해 필요.
    compile group: 'com.kakao.sdk', name: 'usermgmt', version: '1.1.30'

    // 통합광고 SDK
    compile('com.skb.nads.android.sdk:oksusu-android-ad-sdk:1.5.1@aar') {
        transitive = true;
    }

    // Joda-Time : Java Calendar 를 대체하기 위해 사용
    compile 'joda-time:joda-time:2.9.9'
    //compile files('libs/mezzo_sdk1.5_oksusu_3.jar')
    compile project(path: ':skb_android_common')
}

// for deerox@sk.com
def myGroup = "oksusu release";
def appName = "";
def apkPath = "/home/manager/.jenkins/workspace/oksusu_build/app/build/outputs/apk";
def dropboxPath = "/home/manager/.jenkins/workspace/oksusu_build/release";
def drmPath ="/home/manager/.jenkins/workspace/oksusu_build/app/libs/OksusuDrm/Exportoksusu";

def apksigtoolPath = drmPath + "/DrmSigningTool/apksigtool.jar";
def apkkeyPath = drmPath + "/DrmCert/apkkey.pem";
def apkcrtPath = drmPath + "/DrmCert/apkCrt.crt";

// for gs76lee
/*def myGroup = "oksusu release";
def appName = "";
def apkPath = "D:\\01.Development\\oksusu\\app\\build\\outputs\\apk";
def dropboxPath = "D:\\01.Development\\oksusu\\app\\build\\outputs\\apk\\release";
def drmPath ="D:\\OksusuDrm\\Export oksusu";

def apksigtoolPath = drmPath + "\\DrmSigningTool\\apksigtool.jar";
def apkkeyPath = drmPath + "\\DrmCert\\apkkey.pem";
def apkcrtPath = drmPath + "\\DrmCert\\apkCrt.crt";*/

// for psk3458
/*def myGroup = "oksusu release";
def appName = "";
def apkPath = "D:\\dev\\AndroidWorkspace\\Git repo\\oksusu\\app\\build\\outputs\\apk";
def dropboxPath = "D:\\oksusu_release\\apk";
def drmPath ="D:\\oksusu_release";

def apksigtoolPath = drmPath + "\\DrmSigningTool\\apksigtool.jar";
def apkkeyPath = drmPath + "\\DrmCert\\apkkey.pem";
def apkcrtPath = drmPath + "\\DrmCert\\apkCrt.crt";*/


// for tgryu@sk.com
//def myGroup = "oksusu release";
//def appName = "";
//def apkPath = "D:\\work\\Work\\oksusu_git\\app\\build\\outputs\\apk";
//def dropboxPath = "D:\\work\\Work\\oksusu_git\\app\\build\\outputs\\apk\\release";
//def drmPath ="D:\\work\\Work\\Doc\\Build\\Export oksusu";
//
//def apksigtoolPath = drmPath + "\\DrmSigningTool\\apksigtool.jar";
//def apkkeyPath = drmPath + "\\DrmCert\\apkkey.pem";
//def apkcrtPath = drmPath + "\\DrmCert\\apkCrt.crt";



def getCount() {
    // Git
    def stdout = new ByteArrayOutputStream()
    exec {
        executable = "git"
        args = ["rev-list", "HEAD", "--count"]
        standardOutput = stdout
    }

    def revision = stdout.toString().trim()

    println "Latest Changed Revision #: $revision"

    return revision as int

    // SVN
    /*def stdout = new ByteArrayOutputStream()
    exec {
        executable = "svn"
        args = ["info"]
        standardOutput = stdout
    }

    def output = stdout.toString()
    def matchLastChangedRev = output =~ /Last Changed Rev: (\d+)/
    def revision = matchLastChangedRev[0][1]

    println "Latest Changed Revision #: $revision"

    return revision as int*/
}


task releaseOksusu(group: myGroup, type: Copy, dependsOn: 'appsigin') {
    appName = android.defaultConfig.applicationId
    appName += "_${android.defaultConfig.versionName}"
    appName += "_unsigned.apk"

    from 'build/outputs/apk/' + appName
    into dropboxPath
    println "name is " + appName
    def df = new SimpleDateFormat("yyyyMMdd")
    df.setTimeZone(TimeZone.getDefault())
    def count = getCount();
    def newName = "SKB_oksusu_Android"
    // version name
    newName += "_v${android.defaultConfig.versionName}"
    newName += "(${android.defaultConfig.versionCode})"
    newName += "_r$count"
    // Build Date
    newName += "_${df.format(new Date())}"
    newName += ".apk"
    rename { String fileName ->
        fileName.replace(appName, newName)
    }
}

task drmsign(group: myGroup, type: Exec, dependsOn: 'assembleUnsigned') {
    def apkFullPath = apkPath + "/" + appName;
    println "drmsign: " + apkFullPath
    commandLine 'java', '-jar', apksigtoolPath, apkFullPath, apkkeyPath, apkcrtPath
}

task appsigin(group: myGroup, type: Exec, dependsOn: 'drmsign') {
    def apkFullPath = apkPath + "/" + appName;
    println "appsigin: " + apkFullPath
    commandLine 'jarsigner', '-sigalg', 'MD5withRSA', '-digestalg', 'SHA1', '-verbose', '-keystore', android.signingConfigs.release.storeFile, apkFullPath, '-storepass', android.signingConfigs.release.storePassword, '-keypass', android.signingConfigs.release.keyPassword, android.signingConfigs.release.keyAlias
}
